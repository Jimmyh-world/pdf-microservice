/**
 * Test script for the enhanced PDF generation
 *
 * To run: node src/test-markdown.js
 */

const fs = require('fs');
const path = require('path');
const PDFDocument = require('pdfkit');
const {
  renderMarkdownToPdf,
  createCoverPage,
  addPageFooter,
} = require('./utils/pdfRenderer');
const { extractMetadata } = require('./utils/metadataParser');

// Sample markdown content for testing with enhanced features
const sampleMarkdown = `---
title: Enhanced Markdown Document
author: Test User
date: 2024-07-29
keywords: test, markdown, pdf, formatting
---

# Heading Level 1

This is a paragraph with **bold text** and *italic text*.

## Heading Level 2

Here's a bullet list:
- Item 1 with **bold text**
- Item 2 with __also bold text__
- Item 3

### Heading Level 3

Here's a numbered list:
1. First item
2. Second item with **emphasis**
3. Third item

> This is a blockquote. It can contain important information or quotes.

\`\`\`
// This is a code block
function helloWorld() {
  console.log("Hello, World!");
}
\`\`\`

Here's a horizontal rule:

---

And here's some more text after the horizontal rule.

`;

// Function to test PDF generation
function testPdfGeneration() {
  try {
    console.log('Starting enhanced PDF generation test...');

    // Extract metadata
    const { metadata, cleanContent } = extractMetadata(sampleMarkdown);
    console.log('Extracted metadata:', metadata);

    // Create output directory if it doesn't exist
    const outputDir = path.join(__dirname, '..', 'test-output');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Create output file path
    const outputFile = path.join(outputDir, 'enhanced-test-output.pdf');

    // Create PDF document
    const doc = new PDFDocument({
      margins: { top: 50, bottom: 50, left: 50, right: 50 },
      info: {
        Title: metadata.title || 'Test Document',
        Author: metadata.author || '',
        Subject: metadata.subject || '',
        Keywords: Array.isArray(metadata.keywords)
          ? metadata.keywords.join(', ')
          : metadata.keywords || '',
      },
    });

    // Pipe to output file
    const stream = fs.createWriteStream(outputFile);
    doc.pipe(stream);

    // Create cover page
    createCoverPage(metadata, doc);

    // Render markdown content
    renderMarkdownToPdf(cleanContent, doc);

    // Add page numbers to all pages
    addPageFooter(doc, 'Generated by PDF Service');

    // Finalize the PDF
    doc.end();

    console.log(`Enhanced PDF generated successfully: ${outputFile}`);

    stream.on('finish', () => {
      console.log('PDF stream has been finalized');
    });

    return outputFile;
  } catch (error) {
    console.error('Error generating test PDF:', error);
    throw error;
  }
}

// Run the test
testPdfGeneration();
