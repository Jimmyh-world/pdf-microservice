{
  "name": "Markdown to PDF with LLM Formatting",
  "nodes": [
    {
      "parameters": {
        "content": "=== This is a sample workflow that demonstrates how to use an LLM to format Markdown content before sending it to the PDF microservice ===\n\nPlease replace the OpenAI API key and PDF service API key with your actual keys.",
        "height": 368.43301618852036,
        "width": 692.1254052340701
      },
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [180, 240]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "convert-markdown",
        "options": {}
      },
      "name": "Markdown Endpoint",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [340, 400],
      "webhookId": "markdown-to-pdf-converter"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "url": "=https://api.openai.com/v1/chat/completions",
        "options": {
          "fullResponse": true
        },
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$node[\"Set API Keys\"].json[\"openaiApiKey\"]}}"
            }
          ]
        },
        "jsonParameters": true,
        "bodyParametersJson": "={\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a formatting assistant that helps prepare Markdown content for PDF conversion. Your task is to take the input text and return valid, well-structured Markdown with proper YAML frontmatter if applicable. Ensure all Markdown syntax is correct and that the output maintains the original content's meaning.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": $json.markdown || $json.content || \"No content provided\"\n    }\n  ],\n  \"temperature\": 0.3,\n  \"max_tokens\": 2000\n}"
      },
      "name": "Format with LLM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [660, 400]
    },
    {
      "parameters": {
        "functionCode": "// Extract the formatted markdown from the LLM response\nconst data = $input.item.json.body;\nconst formattedMarkdown = data.choices[0].message.content;\n\n// Current timestamp\nconst now = new Date();\nconst timestamp = now.toISOString().replace(/[:.]/g, '-');\n\n// Default filename\nconst defaultFilename = `document-${timestamp}.pdf`;\n\n// Create a properly formatted request for the PDF microservice\nreturn {\n  json: {\n    // The formatted markdown content\n    content: formattedMarkdown,\n    \n    // You can extract a filename from the content or use the default\n    filename: defaultFilename,\n    \n    // Optional PDF generation options\n    options: {\n      size: \"A4\",\n      layout: \"portrait\"\n    }\n  }\n};"
      },
      "name": "Prepare PDF Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [880, 400]
    },
    {
      "parameters": {
        "url": "={{$node[\"Set API Keys\"].json[\"pdfServiceUrl\"]}}/generate-pdf",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "file"
            }
          }
        },
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "={{$node[\"Set API Keys\"].json[\"pdfApiKey\"]}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{$node[\"Prepare PDF Request\"].json[\"content\"]}}"
            },
            {
              "name": "filename",
              "value": "={{$node[\"Prepare PDF Request\"].json[\"filename\"]}}"
            },
            {
              "name": "options",
              "value": "={{$node[\"Prepare PDF Request\"].json[\"options\"]}}"
            }
          ]
        }
      },
      "name": "Generate PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1100, 400]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "writeBinaryData",
        "properties": {
          "options": {
            "encoding": "binary"
          }
        },
        "fileName": "={{$node[\"Prepare PDF Request\"].json[\"filename\"]}}"
      },
      "name": "Save PDF File",
      "type": "n8n-nodes-base.files",
      "typeVersion": 2,
      "position": [1320, 400]
    },
    {
      "parameters": {
        "fromEmail": "noreply@yourdomain.com",
        "toEmail": "={{ $node[\"Markdown Endpoint\"].json[\"email\"] || $node[\"Set API Keys\"].json[\"defaultEmail\"] }}",
        "subject": "Your PDF Document is Ready",
        "text": "=Hello,\n\nYour PDF document has been generated and is attached to this email.\n\nThank you for using our service!\n\nBest regards,\nYour PDF Service",
        "additionalFields": {
          "attachments": "={{ [{\"name\": $node[\"Prepare PDF Request\"].json[\"filename\"], \"data\": $binary[\"Generate PDF\"].data}] }}"
        }
      },
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1540, 400]
    },
    {
      "parameters": {
        "functionCode": "// Set your API keys and service URL here\n// In a production environment, use n8n credentials instead\nreturn {\n  openaiApiKey: \"your-openai-api-key\",\n  pdfApiKey: \"your-pdf-service-api-key\",\n  pdfServiceUrl: \"https://your-pdf-service-url\",\n  defaultEmail: \"recipient@example.com\"\n};"
      },
      "name": "Set API Keys",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [500, 400]
    },
    {
      "parameters": {
        "content": "=== IMPORTANT NOTES ===\n\n1. Replace the API keys in the \"Set API Keys\" node with your actual keys\n2. Set the correct PDF service URL\n3. Configure the email service in n8n\n4. Test with actual Markdown content",
        "height": 223.3037786056493,
        "width": 293.0588235294116
      },
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [500, 560]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "boolean": [],
          "number": [],
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "PDF generated and sent successfully"
            }
          ]
        },
        "options": {}
      },
      "name": "Return Success",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [1760, 400]
    }
  ],
  "connections": {
    "Markdown Endpoint": {
      "main": [
        [
          {
            "node": "Set API Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format with LLM": {
      "main": [
        [
          {
            "node": "Prepare PDF Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare PDF Request": {
      "main": [
        [
          {
            "node": "Generate PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate PDF": {
      "main": [
        [
          {
            "node": "Save PDF File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save PDF File": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API Keys": {
      "main": [
        [
          {
            "node": "Format with LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        [
          {
            "node": "Return Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null,
  "pinData": {},
  "versionId": "",
  "triggerCount": 0,
  "tags": []
}
